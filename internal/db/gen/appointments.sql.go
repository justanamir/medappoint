// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: appointments.sql

package gen

import (
	"context"
	"time"
)

const createAppointment = `-- name: CreateAppointment :one

INSERT INTO appointments (clinic_id, provider_id, patient_id, service_id, start_time, end_time, status, notes)
VALUES ($1,$2,$3,$4,$5,$6,'scheduled',$7)
RETURNING id, clinic_id, provider_id, patient_id, service_id, start_time, end_time, status, notes, created_at, updated_at
`

type CreateAppointmentParams struct {
	ClinicID   int64     `json:"clinic_id"`
	ProviderID int64     `json:"provider_id"`
	PatientID  int64     `json:"patient_id"`
	ServiceID  int64     `json:"service_id"`
	StartTime  time.Time `json:"start_time"`
	EndTime    time.Time `json:"end_time"`
	Notes      *string   `json:"notes"`
}

// cancelled doesn't block
func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppointment,
		arg.ClinicID,
		arg.ProviderID,
		arg.PatientID,
		arg.ServiceID,
		arg.StartTime,
		arg.EndTime,
		arg.Notes,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.ClinicID,
		&i.ProviderID,
		&i.PatientID,
		&i.ServiceID,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProviderAppointmentsOnDate = `-- name: ListProviderAppointmentsOnDate :many
SELECT id, clinic_id, provider_id, patient_id, service_id, start_time, end_time, status
FROM appointments
WHERE provider_id = $1
  AND start_time >= $2
  AND start_time <  $3
  AND status IN ('scheduled','completed')
`

type ListProviderAppointmentsOnDateParams struct {
	ProviderID  int64     `json:"provider_id"`
	StartTime   time.Time `json:"start_time"`
	StartTime_2 time.Time `json:"start_time_2"`
}

type ListProviderAppointmentsOnDateRow struct {
	ID         int64     `json:"id"`
	ClinicID   int64     `json:"clinic_id"`
	ProviderID int64     `json:"provider_id"`
	PatientID  int64     `json:"patient_id"`
	ServiceID  int64     `json:"service_id"`
	StartTime  time.Time `json:"start_time"`
	EndTime    time.Time `json:"end_time"`
	Status     string    `json:"status"`
}

func (q *Queries) ListProviderAppointmentsOnDate(ctx context.Context, arg ListProviderAppointmentsOnDateParams) ([]ListProviderAppointmentsOnDateRow, error) {
	rows, err := q.db.Query(ctx, listProviderAppointmentsOnDate, arg.ProviderID, arg.StartTime, arg.StartTime_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProviderAppointmentsOnDateRow
	for rows.Next() {
		var i ListProviderAppointmentsOnDateRow
		if err := rows.Scan(
			&i.ID,
			&i.ClinicID,
			&i.ProviderID,
			&i.PatientID,
			&i.ServiceID,
			&i.StartTime,
			&i.EndTime,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
