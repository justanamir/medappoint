// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: providers.sql

package gen

import (
	"context"
)

const listProviders = `-- name: ListProviders :many
SELECT
  p.id,
  p.full_name,
  p.speciality,
  p.clinic_id,
  c.name       AS clinic_name,
  c.timezone   AS clinic_timezone
FROM providers p
JOIN clinics   c ON c.id = p.clinic_id
ORDER BY p.id
`

type ListProvidersRow struct {
	ID             int64  `json:"id"`
	FullName       string `json:"full_name"`
	Speciality     string `json:"speciality"`
	ClinicID       int64  `json:"clinic_id"`
	ClinicName     string `json:"clinic_name"`
	ClinicTimezone string `json:"clinic_timezone"`
}

func (q *Queries) ListProviders(ctx context.Context) ([]ListProvidersRow, error) {
	rows, err := q.db.Query(ctx, listProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProvidersRow
	for rows.Next() {
		var i ListProvidersRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Speciality,
			&i.ClinicID,
			&i.ClinicName,
			&i.ClinicTimezone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
