// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: blackouts.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const isDateBlackoutedForProvider = `-- name: IsDateBlackoutedForProvider :one
SELECT EXISTS (
  SELECT 1 FROM blackouts
  WHERE (provider_id = $1 OR (clinic_id = $2 AND provider_id IS NULL))
    AND date = $3
) AS blocked
`

type IsDateBlackoutedForProviderParams struct {
	ProviderID pgtype.Int8 `json:"provider_id"`
	ClinicID   pgtype.Int8 `json:"clinic_id"`
	Date       pgtype.Date `json:"date"`
}

func (q *Queries) IsDateBlackoutedForProvider(ctx context.Context, arg IsDateBlackoutedForProviderParams) (bool, error) {
	row := q.db.QueryRow(ctx, isDateBlackoutedForProvider, arg.ProviderID, arg.ClinicID, arg.Date)
	var blocked bool
	err := row.Scan(&blocked)
	return blocked, err
}
